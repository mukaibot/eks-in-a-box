#!/usr/bin/env ruby
$LOAD_PATH << 'lib'
PLATFORM = `uname`.chomp.downcase
require 'logger'
require 'optparse'
require 'commands/create'
require 'commands/delete'
require 'commands/generate'
require 'commands/prereqs'
require 'commands/update'
require 'commands/write_config'
require 'eks_config'

logger  = Logger.new(STDOUT)
options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: eks-box [options]"

  opts.on("-oOPERATION", "--operation=OPERATION", "Operation to perform. Valid operations are 'generate', 'create', 'delete', 'update', 'prereqs' or 'write-config'") do |o|
    options[:operation] = o
  end

  opts.on("-cCONFIG", "--config=CONFIG", "Configuration file") do |c|
    options[:config] = c
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

abort "Not sure what I should do. Run eks-box --help" if options.empty?

def load_config(options, logger)
  abort "--config not provided" if options[:config].nil?
  config = EksConfig.new
  YAML.load_file(options[:config])
    .map { |pair| config.send("#{pair.first}=", pair.last) }
  logger.info "Using config from file #{options[:config]}"
  config
end

case options.dig(:operation)
when 'create'
  Commands::Create.call(load_config(options, logger), logger)
when 'delete'
  Commands::Delete.call(load_config(options, logger), logger)
when 'generate'
  Commands::Generate.call
when 'update'
  Commands::Update.call(load_config(options, logger), logger)
when 'prereqs'
  Commands::Prereqs.call
when 'write-config'
  Commands::WriteConfig.call(load_config(options, logger), logger)
else
  abort("Unknown option '#{options.dig(:operation)}'")
end
